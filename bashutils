# Process Terminator
# Terminates a process given its name (case-insensitive)
#
# Usage:
#   process_terminator [process_name]
#
# Output:
#   No output, but terminates the specified process.
#
# Example(s):
#   process_terminator "myprocess"
process_terminator () {
  if pgrep -i "$1" > /dev/null
  then
    pkill -i $1
    echo "Process $1 has been terminated."
  else
    echo "No processes found with the name: $1"
  fi
}

# Extract
# An abstraction to get content from various compressed files.
#
# Usage:
#   extract [file]
#
# Output:
#   Extracts the content of the specified compressed file.
#
# Example(s):
#   extract archive.tar.gz
extract() {
	if [ -f $1 ]; then
		case $1 in
		*.tar.bz2) tar xvjf $1 ;;
		*.tar.gz) tar xvzf $1 ;;
		*.bz2) bunzip2 $1 ;;
		*.rar) rar x $1 ;;
		*.gz) gunzip $1 ;;
		*.tar) tar xvf $1 ;;
		*.tbz2) tar xvjf $1 ;;
		*.tgz) tar xvzf $1 ;;
		*.zip) unzip $1 ;;
		*.Z) uncompress $1 ;;
		*.7z) 7z x $1 ;;
		*) echo "don't know how to extract '$1'..." ;;
		esac
	else
		echo "'$1' is not a valid file!"
	fi
}

# File Size (fs)
# Determines the size of a file or total size of a directory.
#
# Usage:
#   fs [file|directory]
#
# Output:
#   Prints the size of the specified file or total size of the specified directory.
#
# Example(s):
#   fs myfile.txt
#   fs mydirectory
fs() {
	if du -b /dev/null >/dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg .[^.]* *
	fi
}

# Repository Root (repo_root)
# Changes the current directory to the root of the current Git repository.
#
# Usage:
#   repo_root
#
# Output:
#   Changes the current directory to the root of the current Git repository. If
#   the current directory is not part of a Git repository, prints an error message.
#
# Example(s):
#   repo_root
repo_root() {
  local root
  root=$(git rev-parse --show-toplevel 2> /dev/null)
  if [[ ! -z "${root}" ]]; then
    cd "${root}" || exit 1
  else
    echo "Current directory is not part of a git repository."
  fi
}

# nocomment() function removes all comments from the contents of the specified file or from stdin.
# It supports removing single-line comments that start with // or #, as well
# as multi-line comments that start with /* and end with */. The modified
# contents are then printed to stdout.
#
# Usage:
#   nocomment [file_path]
#   echo 'code with // comments' | nocomment
#
# Output:
#   The contents of the file or stdin without comments.
#
# Example(s):
#   nocomment "file.go"
#   echo 'code with // comments' | nocomment
nocomment () {
    if [ $# -eq 0 ]
    then
        sed -e 's://.*$::g' -e 's/#.*$//g' -e 's:/\*.*\*/::g' -e '/^\s*$/d'
    else
        file_path="$1"
        sed -e 's://.*$::g' -e 's/#.*$//g' -e 's:/\*.*\*/::g' -e '/^\s*$/d' "$file_path"
    fi
}

# Get list of tmux sessions
tmux_sessions() {
	for s in $(tmux list-sessions -F '#{session_name}'); do
		echo -e "\ntmux session name: $s\n--------------------"
		for p in $(tmux list-panes -s -F '#{pane_pid}' -t "$s"); do
			pstree -p -a $p
		done
	done
}

# Run tmux source-file ~/.tmux.conf on all panes
source_tmux_conf() {
	session=$(tmux display-message -p "#S")

	for pane in $(tmux list-panes -s -F "#{pane_id}"); do
		tmux send-keys -t $session.$pane "tmux source-file ~/.tmux.conf" C-m
	done
}

# Monitor ICMP traffic - great for OOB testing.
icmpMonitor() {
	tcpdump -i "$1" 'icmp and icmp[icmptype]=icmp-echo'
}

# get a line from a particular file
# input line number and file
# example: get_line 200 output.txt
get_line() {
	sed "$1q;d" $2
}

# Check spelling of markdown files in the current directory
spell-check-md() {
	for file in *.md; do
		aspell check --mode=markdown --lang=en "${file}"
	done
}

alias randommacaddrwifi="sudo spoof-mac randomize wi-fi"
alias diff="colordiff"

# Used to clone a web site - takes a website as the parameter
alias cloneSite="wget --mirror --convert-links --adjust-extension --page-requisites --no-parent"

# Get Public IP and Geolocation data
alias publicIP="curl -s https://ipapi.co/$(curl -s ifconfig.me)/json | jq"

# If we are not on an OSX system
if [[ $(uname) != 'Darwin' ]]; then
	alias open="xdg-open"
	alias openPorts="netstat -ntlp | grep LISTEN"
	# Largest files in the current directory and below
	alias largestFilesAndFolders="du -Sh | sort -rh | head -5"
	alias totalDisk='fdisk -l | grep Disk'
	# Find alias with zsh
	if test $(which zsh); then
		alias zshAliasLocation="PS4='+%x:%I>' zsh -i -x -c '' |& grep"
	fi
	alias l.='ls -d .* --color=auto'
fi

alias networkedComputers="arp -a |grep -oP '\d+\.\d+\.\d+\.\d+'"

# If gshuf and cowsay are installed, then evolve our vocab with cowsay
# https://www.quora.com/What-is-the-most-interesting-shell-script-you-have-ever-written
if hash cowsay 2>/dev/null && hash gshuf 2>/dev/null; then
	gshuf -n 1 $HOME/.dotfiles/files/gre | cowsay
fi

# Set alias for nmap if it's installed
# https://github.com/hriesco/dotfiles/blob/master/.aliases
if hash nmap 2>/dev/null; then
	alias nmap="nmap --reason --open --stats-every 3m --max-retries 1 --max-scan-delay 20 --defeat-rst-ratelimit"
fi

alias ipaddr="ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1'"
