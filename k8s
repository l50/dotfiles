# Useful aliases for kubectl
# Resources:
# https://github.com/ahmetb/kubectl-aliases
# https://stackoverflow.com/questions/55373686/how-to-switch-namespace-in-kubernetes
alias k='kubectl'
alias kd='k describe'
alias kg='k get'
alias kdp='kd pods'
alias kgp='kg pods'
alias kgn='kg nodes'
alias kgi='kg ingress'
alias kgs='kg services'
alias krm='k delete'
alias krmf='krm -f'
alias krming='k delete ingress'
alias krmingl='k delete ingress -l'
alias krmingall='k delete ingress --all-namespaces'
alias kgsvcoyaml='kg service -o=yaml'
alias kgsvcwn='kg service --watch --namespace'
alias kgsvcslwn='kg service --show-labels --watch --namespace'
alias kgwf='kg --watch -f'

# Fix pods stuck in a terminating state
# across an input namespace.
unstick_term_pods() {
    NS=${1:-default}
    if [[ "${NS}" == 'all' ]]; then
        kubectl get pods --all-namespaces \
                                      | grep Terminating | while read line; do
            pod_name=$(echo $line | awk '{print $2}') \
            ns=$(echo $line | awk '{print $1}')
            kubectl delete pods $pod_name -n $ns --grace-period=0 --force
        done
    elif [[ "${NS}" != '' ]]; then
        kubectl get pods -n "${NS}" \
                                | grep \
                                --color=auto \
                                --exclude-dir={.bzr,CVS,.git,.hg,.svn,.idea,.tox} Terminating \
                                | while read line; do
                pod_name=$(echo $line | awk '{print $1}')
                kubectl delete pods $pod_name -n "${NS}" --grace-period=0 --force
            done
    else
        echo 'Invalid namespace input'
    fi
}

# Get events in an input namespace
kge() {
    NS=${1:-default}
    if [[ $NS == 'all' ]]; then
        kubectl get events --all-namespaces \
            --sort-by='.metadata.creationTimestamp'
    else
        kubectl get events -n "${NS}" \
            --sort-by='.metadata.creationTimestamp'
    fi
}

# Get Load Balancer IP addresses in an input namespace
kglbip() {
    NS=${1:-default}
    if [[ $NS == 'all' ]]; then
        kubectl get svc --all-namespaces \
            -o jsonpath='{range .items[?(@.spec.type=="LoadBalancer")]}{.metadata.name}:{.status.loadBalancer.ingress[0].ip}{"\n"}{end}'
    else
        kubectl get svc -n "${NS}" \
            -o jsonpath='{range .items[?(@.spec.type=="LoadBalancer")]}{.metadata.name}:{.status.loadBalancer.ingress[0].ip}{"\n"}{end}'
    fi
}

# Remove Finalizers from Kubernetes Resources
#
# This function patches a specified Kubernetes resource to remove its finalizers,
# allowing it to be deleted if it's stuck in a terminating state. It's useful for
# cleaning up resources that are not being properly cleaned up due to finalizer issues.
#
# Usage:
#   remove_finalizers <resource> <name> <namespace>
#   - <resource> is the type of the Kubernetes resource (e.g., deployments, pods)
#   - <name> is the name of the specific resource instance
#   - <namespace> is the namespace where the resource is located
#
# Output:
#   Outputs a success message if the finalizers were successfully removed.
#   If the operation fails, it outputs a failure message with the resource details.
#
# Example(s):
#   remove_finalizers helmrepositories.source.toolkit.fluxcd.io ingress-traefik flux-system
#   This example removes finalizers from a HelmRepository named ingress-traefik in the flux-system namespace.
remove_finalizers() {
    local resource="$1"
    local name="$2"
    local namespace="$3"

    if [[ -z "$resource" || -z "$name" || -z "$namespace" ]]; then
        echo "Usage: remove_finalizers <resource> <name> <namespace>"
        return 1
    fi

    kubectl patch "$resource" "$name" -n "$namespace" --type json -p '[{"op": "remove", "path": "/metadata/finalizers"}]'
    if [ $? -eq 0 ]; then
        echo "Successfully removed finalizers from $resource $name in namespace $namespace."
    else
        echo "Failed to remove finalizers from $resource $name in namespace $namespace."
    fi
}

function delete_non_running_pods() {
  kubectl get pods --all-namespaces --field-selector=status.phase!=Running -o json | kubectl delete -f -
}
