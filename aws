# Deletes an EKS cluster and its associated node groups
#
# This function deletes an Amazon EKS cluster and all of its associated node groups.
# The name of the EKS cluster to delete is provided as an input string to the function.
#
# Usage:
#   delete_eks_cluster_and_node_groups "cluster-name"
#   where "cluster-name" is the name of the EKS cluster you want to delete.
#
# Output:
#   Outputs the progress of deleting the node groups and the EKS cluster, including
#   waiting for each deletion to complete.
#
# Example(s):
#   delete_eks_cluster_and_node_groups "test-tt-test-wndq2t"
delete_eks_cluster_and_node_groups() {
    local CLUSTER_NAME=$1

    if [[ -z "$CLUSTER_NAME" ]]; then
        echo "No cluster name provided. Usage: delete_eks_cluster_and_node_groups <cluster-name>"
        return 1
    fi

    # Get the list of node groups associated with the cluster
    local NODE_GROUPS
    NODE_GROUPS=$(aws eks list-nodegroups --cluster-name "$CLUSTER_NAME" --query 'nodegroups[*]' --output text)

    # Delete each node group
    for NODE_GROUP in $NODE_GROUPS; do
        echo "Deleting node group $NODE_GROUP from cluster $CLUSTER_NAME..."
        aws eks delete-nodegroup --cluster-name "$CLUSTER_NAME" --nodegroup-name "$NODE_GROUP"
        echo "Waiting for node group $NODE_GROUP to be deleted..."
        aws eks wait nodegroup-deleted --cluster-name "$CLUSTER_NAME" --nodegroup-name "$NODE_GROUP"
    done

    # Delete the EKS cluster
    echo "Deleting EKS cluster $CLUSTER_NAME..."
    aws eks delete-cluster --name "$CLUSTER_NAME"
    echo "Waiting for EKS cluster $CLUSTER_NAME to be deleted..."
    aws eks wait cluster-deleted --name "$CLUSTER_NAME"

    echo "EKS cluster $CLUSTER_NAME and its node groups have been successfully deleted."
}

# Deletes KMS keys with a specific string in their alias
#
# This function searches for AWS KMS keys with a specific string in their alias name
# and deletes them. The search string is provided as an input to the function.
# The function lists aliases containing the search string, retrieves the associated key IDs,
# schedules the keys for deletion, and deletes the aliases.
#
# Usage:
#   delete_kms_keys_with_string "search-string"
#   where "search-string" is the string you want to search for in the KMS alias names.
#
# Output:
#   Outputs the progress of deleting each KMS key and its associated alias, including
#   scheduling the deletion of keys and deleting the aliases.
#
# Example(s):
#   Search for and delete KMS keys with "tt-test" in their alias:
#   delete_kms_keys_with_string "tt-test"
#
#   Delete all KMS keys with an empty string in their alias:
#   delete_kms_keys_with_string ' '
delete_kms_keys_with_string() {
    local search_string=$1

    if [[ -z "$search_string" ]]; then
        echo "No search string provided. Usage: delete_kms_keys_with_string <string>"
        return 1
    fi

    # Get a list of KMS aliases with the search string in the name
    local ALIAS_LIST
    if [[ "$search_string" == " " ]]; then
        # Only select aliases that are exactly a single space
        ALIAS_LIST=$(aws kms list-aliases --region "$AWS_DEFAULT_REGION" \
            --query "Aliases[?AliasName==' '].AliasName" --output text)
    else
        ALIAS_LIST=$(aws kms list-aliases --region "$AWS_DEFAULT_REGION" \
            --query "Aliases[?contains(AliasName, \`$search_string\`)].AliasName" --output text)
    fi

    # Process each alias in parallel
    echo "$ALIAS_LIST" | tr '\t' '\n' | while IFS= read -r ALIAS; do
        {
            if [[ -n "$ALIAS" ]]; then
                echo "Processing alias: $ALIAS"

                # Get the key ID associated with the alias
                KEY_ID=$(aws kms list-aliases --region "$AWS_DEFAULT_REGION" \
                    --query "Aliases[?AliasName=='$ALIAS'].TargetKeyId" --output text)

                if [[ -n "$KEY_ID" ]]; then
                    echo "Deleting key with alias: $ALIAS and key ID: $KEY_ID"

                    # Schedule key deletion (keys are not deleted immediately but scheduled for deletion)
                    aws kms schedule-key-deletion --key-id "$KEY_ID" --pending-window-in-days 7 --region "$AWS_DEFAULT_REGION"

                    echo "Scheduled deletion for key ID: $KEY_ID"

                    # Delete the alias
                    aws kms delete-alias --alias-name "$ALIAS" --region "$AWS_DEFAULT_REGION"

                    echo "Deleted alias: $ALIAS"
                else
                    echo "No key associated with alias: $ALIAS"
                fi
            fi
        } &
    done

    # Wait for all background processes to complete
    wait
}

# Wait for Command
#
# Waits for a previously run command to complete.
#
# Usage:
#   wait_for_command [command_id]
#
# Output:
#   No output, but pauses script execution until the specified command has finished running.
#
# Example(s):
#   wait_for_command "0abcd1234efgh5678"
wait_for_command() {
    local command_id=$1
    local command_status

    while true; do
        command_status=$(aws ssm list-command-invocations --command-id "$command_id" --details --query 'CommandInvocations[0].Status' --output text)

        if [ -z "$command_status" ]; then
            echo "Failed to fetch command status."
            exit 1
        elif [ "$command_status" = "Success" ]; then
            break
        elif [ "$command_status" = "Failed" ]; then
            echo "Command execution failed."
            exit 1
        fi

        echo "Waiting for command to finish..."
        sleep 5
    done
}

# Source cloud dotfiles
for file in "${HOME}/.dotfiles/cloud"/*; do
  if [[ -f "${file}" && -r "${file}" ]]; then
    # shellcheck source=/dev/null
    source "${file}"
  fi
done
