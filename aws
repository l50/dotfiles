download_bucket() {
	bucket="${1}"
	if [[ -z "${bucket}" ]]; then
		echo "You need to supply a bucket!"
		echo "Example: download_bucket mybucket $HOME"
		return 1
	fi
	dest="${2}"
	if [[ -z "${dest}" ]]; then
		dest='.'
	fi

	aws s3 sync "s3://${1}" "${dest}"
}

# Get Latest AMI
# Fetches the ID of the latest Amazon Machine Image (AMI) for the
# specified OS distribution, version, and architecture.
#
# Usage:
#   get_latest_ami [distro] [version] [architecture]
#
# Output:
#   Outputs the ID of the AMI.
#
# Example(s):
#   get_latest_ami "ubuntu" "20.04" "amd64"
function get_latest_ami() {
    local distro=$1
    local version=$2
    local architecture=$3

    if [[ "$distro" == "ubuntu" ]]; then
        if [[ "$version" == "22.04" ]]; then
            if [[ "$architecture" == "amd64" ]]; then
                amiNamePattern="ubuntu/images/hvm-ssd/ubuntu-jammy-%s-amd64-server-*"
            elif [[ "$architecture" == "arm64" ]]; then
                amiNamePattern="ubuntu/images/hvm-ssd/ubuntu-jammy-%s-arm64-server-*"
            else
                echo "Unsupported architecture: $architecture"
                return 1
            fi
        elif [[ "$version" == "20.04" ]]; then
            if [[ "$architecture" == "amd64" ]]; then
                amiNamePattern="ubuntu/images/hvm-ssd/ubuntu-focal-%s-amd64-server-*"
            elif [[ "$architecture" == "arm64" ]]; then
                amiNamePattern="ubuntu/images/hvm-ssd/ubuntu-focal-%s-arm64-server-*"
            else
                echo "Unsupported architecture: $architecture"
                return 1
            fi
        elif [[ "$version" == "18.04" ]]; then
            if [[ "$architecture" == "amd64" ]]; then
                amiNamePattern="ubuntu/images/hvm-ssd/ubuntu-bionic-%s-amd64-server-*"
            elif [[ "$architecture" == "arm64" ]]; then
                amiNamePattern="ubuntu/images/hvm-ssd/ubuntu-bionic-%s-arm64-server-*"
            else
                echo "Unsupported architecture: $architecture"
                return 1
            fi
        else
            echo "Unsupported version: $version"
            return 1
        fi
        owner="099720109477"  # Canonical
    elif [[ "$distro" == "centos" ]]; then
        if [[ "$version" == "7" ]]; then
            if [[ "$architecture" == "x86_64" ]]; then
                amiNamePattern="CentOS Linux %s x86_64 HVM EBS*"
            elif [[ "$architecture" == "arm64" ]]; then
                amiNamePattern="CentOS Linux %s arm64 HVM EBS*"
            else
                echo "Unsupported architecture: $architecture"
                return 1
            fi
        elif [[ "$version" == "8" ]]; then
            if [[ "$architecture" == "x86_64" ]]; then
                amiNamePattern="CentOS %s AMI*"
            elif [[ "$architecture" == "arm64" ]]; then
                amiNamePattern="CentOS %s ARM64 AMI*"
            else
                echo "Unsupported architecture: $architecture"
                return 1
            fi
        else
            echo "Unsupported version: $version"
            return 1
        fi
        owner="679593333241"  # Kali Linux
    elif [[ "$distro" == "debian" ]]; then
        if [[ "$version" == "10" ]]; then
            if [[ "$architecture" == "amd64" ]]; then
                amiNamePattern="debian-%s-buster-hvm-amd64-gp2*"
            elif [[ "$architecture" == "arm64" ]]; then
                amiNamePattern="debian-%s-buster-hvm-arm64-gp2*"
            else
                echo "Unsupported architecture: $architecture"
                return 1
            fi
        else
            echo "Unsupported version: $version"
            return 1
        fi
        owner="136693071363"  # Debian
    elif [[ "$distro" == "kali" ]]; then
        if [[ "$version" == "2023.1" ]]; then
            if [[ "$architecture" == "amd64" ]]; then
                amiNamePattern="kali-linux-%s-amd64*"
            elif [[ "$architecture" == "arm64" ]]; then
                amiNamePattern="kali-linux-%s-arm64*"
            else
                echo "Unsupported architecture: $architecture"
                return 1
            fi
        else
            echo "Unsupported version: $version"
            return 1
        fi
        owner="679593333241"  # Kali Linux
    else
        echo "Unsupported distribution: $distro"
        return 1
    fi

    # shellcheck disable=SC2059
    amiNamePattern=$(printf "$amiNamePattern" "$version")

    wait

    # Extract the AMI ID using string manipulation
    AMI_ID=$(aws ec2 describe-images \
        --filters "Name=name,Values=$amiNamePattern" \
        --owners "$owner" \
        --query 'sort_by(Images, &CreationDate)[-1].ImageId' \
        --output text)
    if [ -z "$AMI_ID" ]; then
        echo "No images found for distro: $distro, version: $version, architecture: $architecture"
        return 1
    fi

    echo "$AMI_ID"
}

# Usage example
AMI_ID=$(get_latest_ami "ubuntu" "22.04" "amd64" "${AWS_DEFAULT_REGION}")
echo "Latest AMI ID: $AMI_ID"

# List Running Instances
# Lists all running EC2 instances.
#
# Usage:
#   list_running_instances
#
# Output:
#   Outputs a table of running instances.
#
# Example(s):
#   list_running_instances
list_running_instances() {
  aws ec2 describe-instances \
    --query \
    "Reservations[*].Instances[*].{InstanceId:InstanceId, VPC:VpcId, Subnet:SubnetId, PublicIP:PublicIpAddress,Name:Tags[?Key=='Name']|[0].Value}" \
    --filters Name=instance-state-name,Values=running --no-cli-pager --output json
}
