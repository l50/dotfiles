# Authorize Security Group Ingress
# Authorizes inbound traffic for the specified security group if the rule doesn't already exist.
# Creates the security group if it doesn't already exist.
#
# Usage:
#   authorize_security_group_ingress [group_name] [group_description] [vpc_id] [protocol] [port] [cidr]
#
# Output:
#   Returns the id of the security group, but configures the security group to allow inbound traffic if the rule is added.
#   If the security group or rule already exists, outputs a message indicating the existing group or rule.
#
# Example(s):
#   SECURITY_GROUP_ID=$(authorize_security_group_ingress "my_security_group" "Description of my security group" "vpc-0abcd1234efgh5678" "tcp" "22" "0.0.0.0/0")
function authorize_security_group_ingress() {
    local group_name=$1
    local group_description=$2
    local vpc_id=$3
    local protocol=$4
    local port=$5
    local cidr=$6

    # Check if the security group already exists
    local security_group_id
    security_group_id=$(aws ec2 describe-security-groups --filters Name=group-name,Values="$group_name" --query 'SecurityGroups[0].GroupId' --output text)

    # If the security group doesn't exist or command fails, create it
    if [ -z "$security_group_id" ] || [ "$security_group_id" == "None" ]; then
        if ! security_group_id=$(aws ec2 create-security-group --group-name "$group_name" --description "$group_description" --vpc-id "$vpc_id" --query 'GroupId' --output text); then
            echo "Failed to create security group: $group_name"
            return 1
        fi
        echo "Created security group $group_name with ID: $security_group_id"
    else
        echo "Security group $group_name already exists with ID: $security_group_id"
    fi

    # Check if the ingress rule already exists
    local existing_rule
    existing_rule=$(aws ec2 describe-security-groups \
        --group-ids "$security_group_id" \
        --query "SecurityGroups[0].IpPermissions[?IpProtocol=='$protocol' && FromPort=='$port' && contains(IpRanges[].CidrIp, '$cidr')]")

    if [ -n "$existing_rule" ]; then
        echo "Ingress rule already exists for: $protocol port $port from $cidr"
        echo "$security_group_id"
    else
        if aws ec2 authorize-security-group-ingress \
            --group-id "$security_group_id" \
            --protocol "$protocol" \
            --port "$port" \
            --cidr "$cidr"; then
            echo "Added ingress rule to security group $group_name"
            echo "$security_group_id"
        else
            echo "Failed to add ingress rule to security group $group_name"
            return 1
        fi
    fi
}

# Download Bucket
# Syncs the contents of the specified Amazon S3 bucket to the
# specified local destination directory or to the current directory
# if no destination is provided.
#
# Usage:
#   download_bucket [bucket-name] [destination-directory]
#
# Output:
#   Syncs the files from the S3 bucket to the local destination.
#
# Example(s):
#   download_bucket "mybucket" "$HOME"
#   download_bucket "mybucket"
download_bucket() {
	bucket="${1}"
	if [[ -z "${bucket}" ]]; then
		echo "You need to supply a bucket!"
		echo "Example: download_bucket mybucket $HOME"
		return 1
	fi
	dest="${2}"
	if [[ -z "${dest}" ]]; then
		dest='.'
	fi

	aws s3 sync "s3://${1}" "${dest}"
}



# Get Latest AMI
# Fetches the ID of the latest Amazon Machine Image (AMI) for the
# specified OS distribution, version, and architecture.
#
# Usage:
#   get_latest_ami [distro] [version] [architecture]
#
# Output:
#   Outputs the ID of the AMI.
#
# Example(s):
#   get_latest_ami "ubuntu" "20.04" "amd64"
# Get Latest AMI
# Fetches the ID of the latest Amazon Machine Image (AMI) for the
# specified OS distribution, version, and architecture.
#
# Usage:
#   get_latest_ami [distro] [version] [architecture]
#
# Output:
#   Outputs the ID of the AMI.
#
# Example(s):
#   get_latest_ami "ubuntu" "20.04" "amd64"
function get_latest_ami() {
    local distro=$1
    local version=$2
    local architecture=$3

    if [[ "$distro" == "ubuntu" ]]; then
        if [[ "$version" == "22.04" ]]; then
            if [[ "$architecture" == "amd64" ]]; then
                amiNamePattern="ubuntu/images/hvm-ssd/ubuntu-jammy-%s-amd64-server-*"
            elif [[ "$architecture" == "arm64" ]]; then
                amiNamePattern="ubuntu/images/hvm-ssd/ubuntu-jammy-%s-arm64-server-*"
            else
                echo "Unsupported architecture: $architecture"
                return 1
            fi
        elif [[ "$version" == "20.04" ]]; then
            if [[ "$architecture" == "amd64" ]]; then
                amiNamePattern="ubuntu/images/hvm-ssd/ubuntu-focal-%s-amd64-server-*"
            elif [[ "$architecture" == "arm64" ]]; then
                amiNamePattern="ubuntu/images/hvm-ssd/ubuntu-focal-%s-arm64-server-*"
            else
                echo "Unsupported architecture: $architecture"
                return 1
            fi
        elif [[ "$version" == "18.04" ]]; then
            if [[ "$architecture" == "amd64" ]]; then
                amiNamePattern="ubuntu/images/hvm-ssd/ubuntu-bionic-%s-amd64-server-*"
            elif [[ "$architecture" == "arm64" ]]; then
                amiNamePattern="ubuntu/images/hvm-ssd/ubuntu-bionic-%s-arm64-server-*"
            else
                echo "Unsupported architecture: $architecture"
                return 1
            fi
        else
            echo "Unsupported version: $version"
            return 1
        fi
        owner="099720109477"  # Canonical
    elif [[ "$distro" == "centos" ]]; then
        if [[ "$version" == "7" ]]; then
            if [[ "$architecture" == "x86_64" ]]; then
                amiNamePattern="CentOS Linux %s x86_64 HVM EBS*"
            elif [[ "$architecture" == "arm64" ]]; then
                amiNamePattern="CentOS Linux %s arm64 HVM EBS*"
            else
                echo "Unsupported architecture: $architecture"
                return 1
            fi
        elif [[ "$version" == "8" ]]; then
            if [[ "$architecture" == "x86_64" ]]; then
                amiNamePattern="CentOS %s AMI*"
            elif [[ "$architecture" == "arm64" ]]; then
                amiNamePattern="CentOS %s ARM64 AMI*"
            else
                echo "Unsupported architecture: $architecture"
                return 1
            fi
        else
            echo "Unsupported version: $version"
            return 1
        fi
        owner="679593333241"  # Kali Linux
    elif [[ "$distro" == "debian" ]]; then
        if [[ "$version" == "10" ]]; then
            if [[ "$architecture" == "amd64" ]]; then
                amiNamePattern="debian-%s-buster-hvm-amd64-gp2*"
            elif [[ "$architecture" == "arm64" ]]; then
                amiNamePattern="debian-%s-buster-hvm-arm64-gp2*"
            else
                echo "Unsupported architecture: $architecture"
                return 1
            fi
        else
            echo "Unsupported version: $version"
            return 1
        fi
        owner="136693071363"  # Debian
    elif [[ "$distro" == "kali" ]]; then
        if [[ "$version" == "2023.1" ]]; then
            if [[ "$architecture" == "amd64" ]]; then
                amiNamePattern="kali-linux-%s-amd64*"
            elif [[ "$architecture" == "arm64" ]]; then
                amiNamePattern="kali-linux-%s-arm64*"
            else
                echo "Unsupported architecture: $architecture"
                return 1
            fi
        else
            echo "Unsupported version: $version"
            return 1
        fi
        owner="679593333241"  # Kali Linux
    else
        echo "Unsupported distribution: $distro"
        return 1
    fi

    # shellcheck disable=SC2059
    amiNamePattern=$(printf "$amiNamePattern" "$version")

    wait

    # Extract the AMI ID using string manipulation
    AMI_ID=$(aws ec2 describe-images \
        --filters "Name=name,Values=$amiNamePattern" \
        --owners "$owner" \
        --query 'sort_by(Images, &CreationDate)[-1].ImageId' \
        --output text)

    if [ -z "$AMI_ID" ]; then
        echo "No images found for distro: $distro, version: $version, architecture: $architecture"
        return 1
    fi

    echo "$AMI_ID"
}

# List Running Instances
# Lists all running EC2 instances.
#
# Usage:
#   list_running_instances
#
# Output:
#   Outputs a table of running instances.
#
# Example(s):
#   list_running_instances
list_running_instances() {
  aws ec2 describe-instances \
    --query \
    "Reservations[*].Instances[*].{InstanceId:InstanceId, VPC:VpcId, Subnet:SubnetId, PublicIP:PublicIpAddress,Name:Tags[?Key=='Name']|[0].Value}" \
    --filters Name=instance-state-name,Values=running --no-cli-pager --output json
}

# List Instance Profiles
# Lists all instance profiles.
#
# Usage:
#   list_instance_profiles
#
# Output:
#   Outputs a list of instance profiles.
#
# Example(s):
#   list_instance_profiles
list_instance_profiles() {
    INSTANCE_PROFILE_NAMES=$(aws iam list-instance-profiles --query "InstanceProfiles[].InstanceProfileName" --output text | tr '\t' '\n')

    # For each instance profile, print the name
    for INSTANCE_PROFILE_NAME in $INSTANCE_PROFILE_NAMES; do
        echo "$INSTANCE_PROFILE_NAME"
    done
}
